import tempfile
import librosa
import soundfile as sf
import os
import logging
import numpy as np

logger = logging.getLogger(__name__)

def estimate_bpm(audio_path: str) -> dict:
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not audio_path.lower().endswith('.wav'):
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_wav:
                logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV: {audio_path} -> {tmp_wav.name}")
                y, sr = librosa.load(audio_path, sr=None)
                sf.write(tmp_wav.name, y, sr)
                audio_path = tmp_wav.name

        logger.info(f"üìÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª: {audio_path}")
        y, sr = librosa.load(audio_path)
        tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
        bpm = round(float(tempo), 2)
        logger.info(f"üé∂ BPM: {bpm}")
        return {"bpm": bpm}

    except Exception as e:
        logger.exception(f"BPM Error: {str(e)}")
        return {"bpm": 0.0}

def estimate_bpm_advanced(audio_path: str) -> dict:
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not audio_path.lower().endswith('.wav'):
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_wav:
                logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV: {audio_path} -> {tmp_wav.name}")
                y, sr = librosa.load(audio_path, sr=None)
                sf.write(tmp_wav.name, y, sr)
                audio_path = tmp_wav.name

        logger.info(f"üìÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª: {audio_path}")
        y, sr = librosa.load(audio_path)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞
        tempo, beats = librosa.beat.beat_track(y=y, sr=sr)
        
        # –ê–Ω–∞–ª–∏–∑ onset envelope –¥–ª—è confidence
        onset_env = librosa.onset.onset_strength(y=y, sr=sr)
        
        # –†–∞—Å—á—ë—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = calculate_rhythm_confidence(onset_env, beats, sr)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ BPM (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤)
        alternative_bpm = [
            round(float(tempo * 2), 2),  # –î–≤–æ–π–Ω–æ–π —Ç–µ–º–ø
            round(float(tempo / 2), 2),  # –ü–æ–ª–æ–≤–∏–Ω–Ω—ã–π —Ç–µ–º–ø
        ]
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∏—Ç–º–∞
        rhythm_stability = calculate_rhythm_stability(beats)
        
        bpm = round(float(tempo), 2)
        logger.info(f"üé∂ BPM: {bpm} (confidence: {confidence:.2f})")
        
        return {
            "bpm": bpm,
            "confidence": confidence,
            "alternative_bpm": alternative_bpm,
            "rhythm_stability": rhythm_stability,
            "beat_count": len(beats)
        }

    except Exception as e:
        logger.exception(f"BPM Error: {str(e)}")
        return {
            "bpm": 0.0,
            "confidence": 0.0,
            "alternative_bpm": [],
            "rhythm_stability": 0.0,
            "beat_count": 0
        }

def calculate_rhythm_confidence(onset_env, beats, sr):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–∏—Ç–º–∞
    """
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º onset envelope
        onset_env_norm = onset_env / (np.max(onset_env) + 1e-6)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ - —á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ä–∏—Ç–º –≤—ã—Ä–∞–∂–µ–Ω–Ω–µ–µ
        std_dev = np.std(onset_env_norm)
        
        # –≠–Ω–µ—Ä–≥–∏—è –ø–∏–∫–æ–≤ –≤ –º–µ—Å—Ç–∞—Ö –±–∏—Ç–æ–≤
        beat_frames = librosa.frames_to_samples(beats, sr=sr)
        beat_frames = beat_frames[beat_frames < len(onset_env)]
        
        if len(beat_frames) > 0:
            beat_energy = np.mean(onset_env_norm[beat_frames])
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–±—â–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π
            avg_energy = np.mean(onset_env_norm)
            energy_ratio = beat_energy / (avg_energy + 1e-6)
        else:
            energy_ratio = 0.0
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        confidence = min(1.0, (std_dev * 2 + energy_ratio) / 3)
        return round(confidence, 3)
        
    except Exception:
        return 0.0

def calculate_rhythm_stability(beats):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∏—Ç–º–∞ (–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –±–∏—Ç–∞–º–∏)
    """
    try:
        if len(beats) < 3:
            return 0.0
            
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –±–∏—Ç–∞–º–∏
        intervals = np.diff(beats)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV) - —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ —Ä–∏—Ç–º
        mean_interval = np.mean(intervals)
        std_interval = np.std(intervals)
        
        if mean_interval > 0:
            cv = std_interval / mean_interval
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (1 - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CV)
            stability = max(0.0, 1.0 - min(1.0, cv * 2))
        else:
            stability = 0.0
            
        return round(stability, 3)
        
    except Exception:
        return 0.0



